varying  vec3        vLightVector;
varying  vec3        vLightHalfVector;
varying  vec3        vNormal;

FRAGMENT_SHADER_USE_TEX_COORD
FRAGMENT_SHADER_USE_FOG
FRAGMENT_SHADER_USE_SHADOWS
FRAGMENT_SHADER_USE_DIFFUSE_TERM
FRAGMENT_SHADER_USE_SPECULAR_TERM
FRAGMENT_SHADER_USE_AMBIENT_TERM
FRAGMENT_SHADER_USE_EMISSION_TERM
FRAGMENT_SHADER_USE_LIGHT

void fragmentPhong()
{
   vec3  normal = normalize(vNormal);
   vec3  lv = normalize(vLightVector);
   float factor = dot(lv, normal);
   vec4  color;

#ifdef  LIGHT_SPOT
   float f = dot(-lv, normalize(uLightSpotDir));

   if (f > uLightSpotCutoffCos)
      factor *= pow(f, uLightSpotExp);
   else
     factor = 0.0;
#endif //LIGHT_SPOT

   if (factor > 0.0)
     {

   /* Diffuse term. */
#ifdef  DIFFUSE

        FRAGMENT_SHADER_TEXTURE_BLEND(DIFFUSE, Diffuse)

        gl_FragColor = uLightDiffuse * color * factor;
#else
        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
#endif //DIFFUSE

   /* Specular term. */
#ifdef SPECULAR
        factor = dot(normalize(vLightHalfVector), normal);
        if (factor > 0.0)
          {
             factor = pow(factor, uMaterialShininess);

             FRAGMENT_SHADER_TEXTURE_BLEND(SPECULAR, Specular)

             gl_FragColor += uLightSpecular * color * factor;
          }
#endif

     }
   else
     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);

#ifdef  SHADOWED
   gl_FragColor *= shadow;
#endif //SHADOWED

#ifdef AMBIENT
   FRAGMENT_SHADER_TEXTURE_BLEND(AMBIENT, Ambient)

   gl_FragColor += uLightAmbient * color;
#endif

   /* Light attenuation. */
#ifdef  LIGHT_ATTENUATION
   gl_FragColor /= dot(uLightAtten, vec3(1.0, vLightDist, vLightDist * vLightDist));
#endif

   /* Emission term. */
#ifdef  EMISSION

   FRAGMENT_SHADER_TEXTURE_BLEND(EMISSION, Emission)
   gl_FragColor += color;
#endif

}

void main()
{

#ifdef SHADOWED
   shadow = pcf(vLightPosition, 1.0 / 300.0);
#endif //SHADOWED

   fragmentPhong();

   FRAGMENT_SHADER_FOG_APPLY
}

