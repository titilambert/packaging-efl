varying vec2   vFactor;

FRAGMENT_SHADER_USE_TEX_COORD
FRAGMENT_SHADER_USE_FOG
FRAGMENT_SHADER_USE_SHADOWS
FRAGMENT_SHADER_USE_DIFFUSE_TERM
FRAGMENT_SHADER_USE_SPECULAR_TERM
FRAGMENT_SHADER_USE_AMBIENT_TERM
FRAGMENT_SHADER_USE_EMISSION_TERM

void fragmentFlat()
{
   vec4 color;

#ifdef DIFFUSE

   FRAGMENT_SHADER_TEXTURE_BLEND(DIFFUSE, Diffuse)
   gl_FragColor = uLightDiffuse * color * vFactor.x;
#else
   gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
#endif //DIFFUSE

#ifdef SPECULAR

   FRAGMENT_SHADER_TEXTURE_BLEND(SPECULAR, Specular)
   gl_FragColor += uLightSpecular * color * vFactor.y;

#endif //SPECULAR

#ifdef SHADOWED
   gl_FragColor *= shadow;
#endif //SHADOWED

#ifdef AMBIENT

   FRAGMENT_SHADER_TEXTURE_BLEND(AMBIENT, Ambient)
   gl_FragColor += uLightAmbient * color;
#endif //AMBIENT

#ifdef  EMISSION

   FRAGMENT_SHADER_TEXTURE_BLEND(EMISSION, Emission)
   gl_FragColor += color;
#endif //EMISSION

}

void main() {

#ifdef SHADOWED
   shadow = pcf(vLightPosition, 1.0 / 200.0);
#endif //SHADOWED

   fragmentFlat();

   FRAGMENT_SHADER_FOG_APPLY
}
