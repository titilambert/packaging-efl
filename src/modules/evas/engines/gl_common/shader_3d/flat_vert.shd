uniform   mat4  uMatrixMvp;
uniform   mat3  uMatrixNormal;
uniform   mat4  uMatrixModelview;
uniform   vec4  uLightPosition;
varying   vec2  vFactor;

VERTEX_SHADER_USE_SHADOWS
VERTEX_SHADER_USE_POSITION
VERTEX_SHADER_USE_NORMALS
VERTEX_SHADER_USE_TEXCOORD
VERTEX_SHADER_NEED_TEX_COORD

#ifdef LIGHT_SPOT
uniform   vec3  uLightSpotDir;
uniform   float uLightSpotExp;
uniform   float uLightSpotCutoffCos;
#endif //LIGHT_SPOT

#ifdef SPECULAR
uniform float   uMaterialShininess;
#endif //SPECULAR

#ifdef LIGHT_ATTENUATION
uniform   vec3  uLightAtten;
#endif //LIGHT_ATTENUATION

void vertexFlat(vec4 position, vec3 normal)
{
   vec3  lv;
   float factor;
   normal = uMatrixNormal * normal;
   position = uMatrixModelview * position;

#ifdef NORMALIZE_NORMALS
   normal = normalize(normal);
#endif //NORMALIZE_NORMALS

#ifdef LIGHT_DIRECTIONAL
   lv = uLightPosition.xyz;
#else
   lv = uLightPosition.xyz - position.xyz;
   lv = normalize(lv);
#endif //LIGHT_DIRECTIONAL

   factor = max(dot(lv, normal), 0.0);

#ifdef LIGHT_SPOT
   float f = dot(-lv, uLightSpotDir);
   if (f > uLightSpotCutoffCos)
     factor *= pow(f, uLightSpotExp);
   else
      factor = 0.0;
#endif //LIGHT_SPOT

   if (factor > 0.0)
     {

#ifdef DIFFUSE
        vFactor.x = factor;
#else
        vFactor.x = 0.0;
#endif //DIFFUSE

#ifdef SPECULAR
        vec3  hv = normalize(normalize(-position.xyz) + lv);
        factor = pow(max(dot(hv, normal), 0.0), uMaterialShininess);
        vFactor.y = factor;
#endif //SPECULAR

     }
   else
     vFactor = vec2(0.0, 0.0);

   /* Light attenuation. */
#ifdef LIGHT_ATTENUATION
   float dist = length(lv);
   vFactor /= dot(uLightAtten, vec3(1.0, dist, dist * dist));
#endif //LIGHT_ATTENUATION
}

void main()
{

   VERTEX_SHADER_POSITION
   VERTEX_SHADER_NORMAL
   VERTEX_SHADER_TEXCOORD

   gl_Position = uMatrixMvp * position;
   vertexFlat(position, normal);

   VERTEX_SHADER_SHADOWED
}
