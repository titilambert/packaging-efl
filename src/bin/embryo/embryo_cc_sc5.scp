/*  Small compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2003
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

int         strexpand(char *dest, unsigned char *source, int maxlen,
			      unsigned char pairtable[128][2]);

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char       errstr_table[][2] = {
   {101, 32}, {116, 32}, {111, 110}, {105, 110}, {97, 114}, {100, 32}, {105,
									130},
      {101, 114}, {101, 110}, {115, 32}, {97, 108}, {97, 116}, {117, 110}, {115,
									    34},
      {37, 141}, {34, 142},
   {109, 136}, {121, 32}, {97, 110}, {114, 101}, {99, 116}, {134, 32}, {110,
									111},
      {101, 133}, {118, 138}, {115, 105}, {98, 108}, {111, 114}, {115, 116},
      {41, 10}, {109, 98}, {100, 101},
   {117, 115}, {150, 129}, {102, 140}, {117, 144}, {162, 148}, {103, 163}, {132,
									    165},
      {114, 97}, {105, 133}, {152, 168}, {99, 104}, {32, 143}, {97, 32}, {131,
									  169},
      {97, 115}, {164, 149},
   {111, 108}, {101, 120}, {97, 154}, {135, 32}, {132, 167}, {111, 102}, {105,
									  116},
      {166, 129}, {101, 100}, {98, 128}, {178, 128}, {160, 129}, {105, 137},
      {180, 145}, {121, 158}, {190, 176},
   {109, 187}, {115, 191}, {118, 132}, {101, 10}, {115, 10}, {112, 147}, {155,
									  32},
      {181, 32}, {159, 102}, {194, 105}, {99, 130}, {103, 32}, {201, 186}, {116,
									    111},
      {34, 32}, {109, 97},
   {153, 122}, {171, 10}, {104, 97}, {100, 105}, {108, 111}, {111, 112}, {200,
									  131},
      {139, 134}, {213, 135}, {101, 137}, {202, 156}, {143, 157}, {138, 32},
      {192, 185}, {58, 209}, {105, 99},
   {112, 111}, {115, 115}, {110, 117}, {115, 117}, {146, 129}, {226, 158}, {229,
									    179},
      {177, 197}, {231, 225}, {132, 97}, {98, 101}, {99, 111}, {216, 139}, {109,
									    139},
      {116, 10}, {99, 146},
   {44, 32}, {237, 170}, {131, 203}, {116, 104}, {117, 108}, {152, 117}, {108,
									  128},
      {118, 128}, {101, 144}, {233, 148}, {174, 153}, {110, 32}, {131, 32},
      {146, 32}, {239, 161}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char        *errmsg[] = {
#ifdef SCPACK
/*001*/ "expected token: \"%s\", but found \"%s\"\n",
/*002*/ "only a single statement (or expression) can follow each \"case\"\n",
/*003*/ "declaration of a local variable must appear in a compound block\n",
/*004*/ "function \"%s\" is not implemented\n",
/*005*/ "function may not have arguments\n",
/*006*/ "must be assigned to an array\n",
/*007*/ "assertion failed\n",
/*008*/ "must be a constant expression; assumed zero\n",
/*009*/ "invalid array size (negative or zero)\n",
/*010*/ "invalid function or declaration\n",
/*011*/ "invalid outside functions\n",
/*012*/ "invalid function call, not a valid address\n",
/*013*/ "no entry point (no public functions)\n",
/*014*/ "invalid statement; not in switch\n",
/*015*/ "\"default\" case must be the last case in switch statement\n",
/*016*/ "multiple defaults in \"switch\"\n",
/*017*/ "undefined symbol \"%s\"\n",
/*018*/ "initialization data exceeds declared size\n",
/*019*/ "not a label: \"%s\"\n",
/*020*/ "invalid symbol name \"%s\"\n",
/*021*/ "symbol already defined: \"%s\"\n",
/*022*/ "must be lvalue (non-constant)\n",
/*023*/ "array assignment must be simple assignment\n",
/*024*/ "\"break\" or \"continue\" is out of context\n",
/*025*/ "function heading differs from prototype\n",
/*026*/ "no matching \"#if...\"\n",
/*027*/ "invalid character constant\n",
/*028*/ "invalid subscript (not an array or too many subscripts)\n",
/*029*/ "invalid expression, assumed zero\n",
/*030*/ "compound statement not closed at the end of file\n",
/*031*/ "unknown directive\n",
/*032*/ "array index out of bounds (variable \"%s\")\n",
/*033*/ "array must be indexed (variable \"%s\")\n",
/*034*/ "argument does not have a default value (argument %d)\n",
/*035*/ "argument type mismatch (argument %d)\n",
/*036*/ "empty statement\n",
/*037*/ "invalid string (possibly non-terminated string)\n",
/*038*/ "extra characters on line\n",
/*039*/ "constant symbol has no size\n",
/*040*/ "duplicate \"case\" label (value %d)\n",
/*041*/ "invalid ellipsis, array size is not known\n",
/*042*/ "invalid combination of class specifiers\n",
/*043*/ "character constant exceeds range for packed string\n",
/*044*/ "positional parameters must precede all named parameters\n",
/*045*/ "too many function arguments\n",
/*046*/ "unknown array size (variable \"%s\")\n",
/*047*/ "array sizes must match\n",
/*048*/ "array dimensions must match\n",
/*049*/ "invalid line continuation\n",
/*050*/ "invalid range\n",
/*051*/ "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/ "only the last dimension may be variable length\n",
/*053*/ "exceeding maximum number of dimensions\n",
/*054*/ "unmatched closing brace\n",
/*055*/ "start of function body without function header\n",
/*056*/
      "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/ "unfinished expression before compiler directive\n",
/*058*/ "duplicate argument; same argument is passed twice\n",
/*059*/ "function argument may not have a default value (variable \"%s\")\n",
/*060*/ "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/ "operator cannot be redefined\n",
/*062*/ "number of operands does not fit the operator\n",
/*063*/ "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/ "cannot change predefined operators\n",
/*065*/ "function argument may only have a single tag (argument %d)\n",
/*066*/
      "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/
      "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/ "invalid rational number precision in #pragma\n",
/*069*/ "rational number format already defined\n",
/*070*/ "rational number support was not enabled\n",
/*071*/
      "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/ "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/ "function argument must be an array (argument \"%s\")\n",
/*074*/ "#define pattern must start with an alphabetic character\n",
/*075*/ "input line too long (after substitutions)\n"
#else
   "\261pe\224\227\315k\210:\253\360bu\201fo\214\205\217\012",
   "\202l\221\254s\203g\366\234\213\370\201(\306\350\206) \357 f\260\324w ea\252 \042c\256e\042\012",
   "\237cl\204\213\225\307\254\324c\334\314\300appe\204 \374\254\353m\340\214\205\232ock\012",
   "\257\217 \274\241impl\370t\270\012",
   "\257\317\221\241\322\367\246t\304",
   "\335\372gn\227\315 \375\264y\012",
   "\256s\207t\225fail\270\012",
   "\335\254\332\344\350\206; \256\343m\227z\207o\012",
   "\255\275\320\200(neg\213i\367\306z\207o\235",
   "\255\257\306\237cl\204\327\012",
   "\255out\231d\200\244\206\304",
   "\255\257c\212l\360\241\254\251add\223s\304",
   "\226 \210tr\221\340\203\201(\226 pu\232\337 \244\206s\235",
   "\255\234\213\370t; \241\374sw\266\252\012",
   "\042\310a\364t\316c\256\200\335\363\200l\256\201c\256\200\374sw\266\252 \234\213\370\356",
   "m\364tip\366\310a\364t\211\374\042sw\266\252\042\012",
   "\214\326\227\301\321",
   "\203\266i\212iz\213\225d\213\254\261ce\270\211\237cl\204\227\320\303",
   "\241\254la\352l\336",
   "\255\301 nam\200\217\012",
   "\301 \212\223ad\221\326\270\336",
   "\335l\365\200(n\202-\332\222t\235",
   "\275\372gn\220\201\335\231mp\366\372gn\220\356",
   "\042b\223ak\316\306\042\312t\203ue\316\274ou\201\307\312t\261\356",
   "\257head\362\323ff\207\211from pro\315typ\303",
   "\226 \361\362\042#if...\042\012",
   "\255\252\371\263\332\222\356",
   "\255\343bscrip\201(\241\375\275\306\315o m\222\221\343bscripts\235",
   "\255\350\206\360\256\343m\227z\207o\012",
   "\353m\340\214\205\234\213\370\201\241c\324s\227a\201\363\200\210\205\307fil\303",
   "\214k\226w\373\323\223\224iv\303",
   "\275\203\237x ou\201\307bo\214d\211(\314\333",
   "\275\335\203\237x\227(\314\333",
   "\267do\331\241\322\367\254\310a\364\201\365\200(\267%d\235",
   "\267typ\200mis\361 (\267%d\235",
   "empt\221\234\213\370\356",
   "\255\234r\362(\340s\231\232\221n\202-t\207m\203\213\227\234r\203g\235",
   "\261t\247 \252\371\207\211\202 l\203\303",
   "\332\344\301 \322\211\226 \320\303",
   "dupl\337\213\200\042c\256e\316la\352l (\365\200%d\235",
   "\255ellip\231s\360\275\320\200\274\241k\226wn\012",
   "\255\353\236\203\213\225\307cl\256\211specifi\207\304",
   "\252\371\263\332\344\261ce\270\211r\222g\200f\306pack\227\234r\203g\012",
   "\340\231t\206\334p\351met\207\211\300\305c\270\200\212l nam\227p\351met\207\304",
   "\315o m\222\221\257\246t\304",
   "\214k\226w\373\275\320\200(\314\333",
   "\275\320\331\300\361\012",
   "\275\323\220s\206\211\300\361\012",
   "\255l\203\200\312t\203u\327\012",
   "\255r\222g\303",
   "\255\343bscript\360\240\200\042[ ]\316\354\233\211\202 \317j\306\323\220s\206\304",
   "\202l\221\363\200l\256\201\323\220s\225\317\221\271\314l\210g\363\012",
   "\261ce\270\362\317ximum \346\307\323\220s\206\304",
   "\214\361\227c\324s\362b\247c\303",
   "\234\204\201\307\257bod\221w\266hou\201\257head\207\012",
   "\264ys\360\324c\334\311\262\331\222\205\257\246t\211\376\271pu\232\337 (\314\333",
   "\214f\203ish\227\350\225\352f\233\200\353mpil\263\323\223\224iv\303",
   "dupl\337\213\200\246t; sam\200\267\274p\256s\227tw\337\303",
   "\257\267\317\221\241\322\367\254\310a\364\201\365\200(\314\333",
   "m\364tip\366\042#else\316\323\223\224iv\331\352twe\210 \042#if ... #\210\323f\042\012",
   "\354\306\376\271\223\326\270\012",
   "\346\307\330\222d\211do\331\241fi\201\363\200\354\233\012",
   "\257\223\343l\201ta\313\307\354\233\253 \335\217\012",
   "\376\252\222g\200\305\326\227\354\233\304",
   "\257\267\317\221\202l\221\322\367\254s\203g\366ta\313(\267%d\235",
   "\257\267\317\221\241\271\254\223f\207\210c\200\267\306\375\275(\267\333",
   "\314\376\271bo\363 \254\223f\207\210c\200\222\205\375\275(\314\333",
   "\255r\327\334\346\305cis\225\374#p\247g\317\012",
   "r\327\334\346f\233\317\201\212\223ad\221\326\270\012",
   "r\327\334\346\343pp\233\201wa\211\241\210\262\270\012",
   "\240\207-\326\227\354\306\335\237cl\204\227\352f\233\200\240\200(\257\333",
   "\042\320e\265\316\354\306\274\255\202 \042\244\206\316\301\304",
   "\257\267\335\375\275(\267\333",
   "#\326\200p\213t\207\373\300\234\204\201w\266h \375\212p\322\352t\337 \252\371\207\012",
   "\203pu\201l\203\200\315o l\202\313(aft\263\343b\234\266ut\206s\235"
#endif
};

static char        *fatalmsg[] = {
#ifdef SCPACK
/*100*/ "cannot read from file: \"%s\"\n",
/*101*/ "cannot write to file: \"%s\"\n",
/*102*/ "table overflow: \"%s\"\n",
   /* table can be: loop table
    *               literal table
    *               staging buffer
    *               parser stack (recursive include?)
    *               option table (response file)
    *               peephole optimizer table
    */
/*103*/ "insufficient memory\n",
/*104*/ "invalid assembler instruction \"%s\"\n",
/*105*/ "numeric overflow, exceeding capacity\n",
/*106*/ "compaction buffer overflow\n",
/*107*/ "too many error messages on one line\n"
#else
   "\376\223a\205from file\336",
   "\376wr\266\200\315 file\336",
   "t\272ov\207f\324w\336",
   "\203\343ff\337i\210\201mem\233y\012",
   "\255\256sem\232\263\203\234ru\224\225\217\012",
   "\342m\207\337 ov\207f\324w\360\261ce\270\362capac\266y\012",
   "\353mpa\224\225buff\263ov\207f\324w\012",
   "\315o m\222\221\207r\306me\341ag\331\202 \202\200l\203\303"
#endif
};

static char        *warnmsg[] = {
#ifdef SCPACK
/*200*/ "symbol \"%s\" is truncated to %d characters\n",
/*201*/ "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/ "number of arguments does not match definition\n",
/*203*/ "symbol is never used: \"%s\"\n",
/*204*/ "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/ "redundant code: constant expression is zero\n",
/*206*/ "redundant test: constant expression is non-zero\n",
/*207*/ "unknown #pragma\n",
/*208*/ "function uses both \"return;\" and \"return <value>;\"\n",
/*209*/ "function \"%s\" should return a value\n",
/*210*/ "possible use of symbol before initialization: \"%s\"\n",
/*211*/ "possibly unintended assignment\n",
/*212*/ "possibly unintended bitwise operation\n",
/*213*/ "tag mismatch\n",
/*214*/ "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/ "expression has no effect\n",
/*216*/ "nested comment\n",
/*217*/ "loose indentation\n",
/*218*/ "old style prototypes used with optional semicolumns\n",
/*219*/ "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/ "exported or native symbol \"%s\" is truncated to %d characters\n",
/*221*/ "label name \"%s\" shadows tag name\n",
/*222*/ "number of digits exceeds rational number precision\n",
/*223*/ "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/
      "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/ "unreachable code\n",
/*226*/ "a variable is assigned to itself (symbol \"%s\")\n"
#else
   "\301\253 \274tr\214c\213\227\315 %\205\252\371\207\304",
   "\223\326\266\225\307\332\222t/\317cro (\301\253\235",
   "\346\307\246t\211do\331\241\361 \326\266\206\012",
   "\301 \274nev\263\240\270\336",
   "\301 \274\372gn\227\254\365\200t\322\201\274nev\263\240\270\336",
   "\223d\214d\344\353\237: \332\344\350\225\274z\207o\012",
   "\223d\214d\344te\234: \332\344\350\225\274n\202-z\207o\012",
   "\214k\226w\373#p\247g\317\012",
   "\257\240\331bo\363 \042\223turn;\316\222\205\042\223tur\373<\365e>;\042\012",
   "\257\217 sho\364\205\223tur\373\254\365\303",
   "\340s\231\232\200\240\200\307\301 \352f\233\200\203\266i\212iz\327\336",
   "\340s\231\232\221\214\203t\210d\227\372gn\220\356",
   "\340s\231\232\221\214\203t\210d\227b\266wis\200\330\327\012",
   "ta\313mis\361\012",
   "\340s\231\232\221\254\042\332\316\275\267wa\211\203t\210\237d\336",
   "\350\225\322\211\226 effe\224\012",
   "ne\234\227\353m\220\356",
   "\324os\200\203d\210t\327\012",
   "\260\205\234y\366pro\315typ\331\240\227w\266h \325t\206\334sem\337\260umn\304",
   "\324c\334\314\217 s\322dow\211\254\314a\201\254\305c\270\362level\012",
   "\261p\233t\227\306n\213i\367\301\253 \274tr\214c\213\227\315 %\205\252\371\207\304",
   "la\352l nam\200\217 s\322dow\211ta\313nam\303",
   "\346\307\323g\266\211\261ce\270\211r\327\334\346\305cis\206\012",
   "\223d\214d\344\042\320e\265\042: \267\320\200\274\212way\2111 (\301\253\235",
   "\203\237t\207m\203\213\200\275\320\200\374\042\320e\265\316\350\225(\301\253\235",
   "\214\223a\252\272\353\237\012",
   "\254\314\274\372gn\227\315 \266self (\301\253\235"
#endif
};
